/*
 * connection-proposer-api
 *
 * Connection proposer API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ConnectionDesignSetApiController : ControllerBase
    { 
        /// <summary>
        /// Create or modify the connection design set
        /// </summary>
        /// <remarks>Create or modify the connection design set and return the updated instance from the database</remarks>
        /// <param name="body">An object containing connection design set information</param>
        /// <response code="200">Information about the modified connection design set</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized user</response>
        [HttpPost]
        [Route("/martin.pospisil/connection-proposer-api/1.0.0/design-set")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateConDesignSet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConDesignSet), description: "Information about the modified connection design set")]
        public virtual IActionResult CreateConDesignSet([FromBody]ConDesignSet body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConDesignSet));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"owner\" : \"engineer\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConDesignSet>(exampleJson)
                        : default(ConDesignSet);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete the connection design set
        /// </summary>
        /// <remarks>Delete the single connection design set which is defined by passed its unique id</remarks>
        /// <param name="id">The ID of the required connection design set</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized user</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/martin.pospisil/connection-proposer-api/1.0.0/design-set")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteConDesignSet")]
        public virtual IActionResult DeleteConDesignSet([FromQuery][Required()]ConDesignSetId id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get single connection design set by its unique id
        /// </summary>
        /// <param name="id">The ID of the required connection design set</param>
        /// <response code="200">Information about connection design set</response>
        /// <response code="401">Unauthorized user</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/martin.pospisil/connection-proposer-api/1.0.0/design-set")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetConDesignSet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConDesignSet), description: "Information about connection design set")]
        public virtual IActionResult GetConDesignSet([FromQuery][Required()]ConDesignSetId id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConDesignSet));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"owner\" : \"engineer\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConDesignSet>(exampleJson)
                        : default(ConDesignSet);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all available connection design sets for the current user
        /// </summary>
        /// <response code="200">A list of available connection design sets for the user</response>
        /// <response code="401">Unauthorized user</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/martin.pospisil/connection-proposer-api/1.0.0/design-sets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetConDesignSets")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ConDesignSet>), description: "A list of available connection design sets for the user")]
        public virtual IActionResult GetConDesignSets()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ConDesignSet>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"owner\" : \"engineer\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}, {\n  \"owner\" : \"engineer\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ConDesignSet>>(exampleJson)
                        : default(List<ConDesignSet>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
